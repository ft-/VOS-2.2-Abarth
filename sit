////Not sure where I found it. Did modify it a little. Use it at your own risk.
//
vector current_rotation = <0.0,0.0,0.0>;
vector current_position = <-1.92,-0.00,0.82>;
vector reset_rotation = <0.0,0.0,0.0>;
vector reset_position = <-1.92,-0.00,0.82>;

list sit_target;
integer listen_handler;
integer SIT_ADJUST = 50;
string  menu_text =" --- ";

set_pos_menu_text(){
menu_text = 
"\n\nAdjust Sitting\n
P O S I T I O N\n"+
"Forward "+"          Left"+"            Up"+"\n"+
"Back    "+"         Right"+"          Down"+"\n"
;}

set_rot_menu_text(){
menu_text = 
"\n\nAdjust Sitting\n
R O T A T I O N\n"+
"Lean Forward "+"        Spin Left "+"      Lean Left"+"\n"+
"Lean Back    "+"        Spin Right"+"      Lear Right"+"\n"
;}

list buttons_position = ["Position","Rotation","close menu","P→","P↱","P↓","P←","P↰","P↑","Reset Pos","Reset Rot","Reset Both"];

list buttons_rotation = ["Position","Rotation","close menu","R↓","R↱","R→","R↑","R↰","R←","Reset Pos","Reset Rot","Reset Both"];

list position = ["P←",<0.01,0,0>,"P↱",<0,-0.01,0>,"P↓",<0,0,-0.01>,"P→",<-0.01,0,0>,"P↰",<0,0.01,0>,"P↑",<0,0,0.01>];

list rotat = ["R→",<-1,0,0>,"R↱",<0,0,-1>,"R↑",<0,-1,0>,"R←",<1,0,0>,"R↰",<0,0,1>,"R↓",<0,1,0>];

integer menu_handler;
integer menu_channel;

menu(key user,string title,list buttons) {
    llListenRemove(menu_handler);
    menu_channel = (integer)(llFrand(99999.0) * -1);
    menu_handler = llListen(menu_channel,"","","");
    llDialog(llGetOwner(),title,buttons,menu_channel);
    llSetTimerEvent(60);    
}

UpdateSitTarget(vector pos, vector rotter)
{    rotation rot = llEuler2Rot(rotter * DEG_TO_RAD);    
    llSitTarget(current_position,llEuler2Rot(current_rotation * DEG_TO_RAD)); 
    key user = llAvatarOnSitTarget();
    if(user)
    {
        vector size = llGetAgentSize(user);
        if(size)
        {            
            rotation localrot = ZERO_ROTATION;
            vector localpos = ZERO_VECTOR;
            if(llGetLinkNumber() > 1)
            {
                localrot = llGetLocalRot();
                localpos = llGetLocalPos();
            }
            pos.z += 0.4;
            integer linkNum = llGetNumberOfPrims();
            do{
                if(user == llGetLinkKey( linkNum ))
                {
                    llSetLinkPrimitiveParams(linkNum,
                                            [PRIM_POSITION, ((pos - (llRot2Up(rot) * size.z * 0.02638)) * localrot) + localpos,
                                             PRIM_ROTATION, rot * localrot / llGetRootRotation()]);
                    jump end;
                }
            }while( --linkNum );
        }
        else
        {
            llUnSit(user);
        }
    }
    @end;
}

default
{   
    state_entry() {
        llSitTarget(current_position,llEuler2Rot(current_rotation * DEG_TO_RAD));        
    }
    changed(integer change) {
        if (change & CHANGED_LINK) {
            if (llAvatarOnSitTarget() != NULL_KEY) {
                listen_handler = llListen(1,"","","");                                         
            } else if (llAvatarOnSitTarget() == NULL_KEY) {
                llListenRemove(listen_handler);           
            }            
        }        
    }
    timer() {
        llSetTimerEvent(60.0);
        llListenRemove(menu_handler);    
    }
   // link_message(integer sender_num,integer num,string message,key id) {
   //     if (num == SIT_ADJUST) {
   //         if (llAvatarOnSitTarget()!=NULL_KEY) {
   //             set_pos_menu_text();
   //             menu(llGetOwner(),menu_text,buttons_position);
   //         }
   //     }     
   // }
    listen(integer channel,string name,key id,string message) {
        
        if ((llGetOwner()==id) || (llDetectedKey(0)==llGetKey())) {
            
            // Owner type "/1 fix" in main chat to access adjust menu
            // You might need to do this multiple times. Depending on the conditions of the sim.
            if ((llSubStringIndex(message,llToLower("fix")) != -1)) {
                set_pos_menu_text();
                menu(llGetOwner(),menu_text,buttons_position);
                return;
            }
            if (message == "Position") {
                set_pos_menu_text();
                menu(llGetOwner(),menu_text,buttons_position);
                return;
            }
            if (message == "Rotation") {
                set_rot_menu_text();
                menu(llGetOwner(),menu_text,buttons_rotation);
                return;
            }
            if (message == "Reset Pos") {
                current_position = current_position;
                UpdateSitTarget(current_position,current_rotation);
                llOwnerSay("Position Reset");
                set_pos_menu_text();
                menu(llGetOwner(),menu_text,buttons_position);
                return;
            }
            if (message == "Reset Rot") {
                current_rotation = ZERO_VECTOR;
                UpdateSitTarget(current_position,current_rotation);
                set_rot_menu_text();
                menu(llGetOwner(),menu_text,buttons_rotation);
                return;                
            }
            if (message == "Reset Both") {
                current_rotation = reset_rotation;
                current_position = reset_position;
                UpdateSitTarget(current_position,current_rotation);
                llOwnerSay("Position and Rotation Reset");
                set_pos_menu_text();
                menu(llGetOwner(),menu_text,buttons_position);
                return;
            }
            if
            (llGetSubString(message,0,0)=="P") {
                integer tempp = llListFindList(position,[message]);
                tempp += 1;
                current_position += llList2Vector(position,tempp);
                UpdateSitTarget(current_position,current_rotation);
                set_pos_menu_text();
                menu(llGetOwner(),menu_text,buttons_position);
                return;
            }
            
            else if
            (llGetSubString(message,0,0)=="R") {
                integer tempr = llListFindList(rotat,[message]);
                tempr += 1;
                current_rotation += llList2Vector(rotat,tempr);
                UpdateSitTarget(current_position,current_rotation);
                set_rot_menu_text();
                menu(llGetOwner(),menu_text,buttons_rotation);
                return;
            }
        }        
    }   
}
